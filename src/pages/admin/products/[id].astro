---
export const prerender = false;

import { DevIndicator } from '../../../components/DevIndicator';
import ProductForm from '../../../components/ProductForm';
import { getSiteConfig } from '../../../config/site';
import Layout from '../../../layouts/Layout.astro';
import { getProductById } from '@lib/stripe';
import type { Product } from '../../../types/product';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/products');
}

const siteConfig = getSiteConfig();
const product = await getProductById(id);

if (!product) {
  return Astro.redirect('/admin/products');
}
---

<Layout title={`Edit ${product.name}`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Development Mode Indicator -->
    <DevIndicator
      isDevelopment={Astro.locals.user?.isDevelopment}
      client:load
    />

    <!-- Admin Header -->
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Edit Product</h1>
            <p class="text-gray-600">{product.name}</p>
            <p class="text-sm text-gray-500">ID: {product.id}</p>
          </div>
          <div class="flex space-x-3">
            <a
              href={`/shop/${product.slug}`}
              class="btn btn-outline"
              target="_blank">
              View Product
            </a>
            <a href="/admin/products" class="btn btn-outline">
              Back to Products
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8">
      <!-- Product Status Banner -->
      <div
        class={`mb-6 rounded-lg p-4 ${
          product.active
            ? 'bg-green-50 border border-green-200'
            : 'bg-yellow-50 border border-yellow-200'
        }`}>
        <div class="flex items-center">
          <div
            class={`w-3 h-3 rounded-full mr-3 ${
              product.active ? 'bg-green-400' : 'bg-yellow-400'
            }`}>
          </div>
          <div>
            <h3
              class={`font-medium ${
                product.active ? 'text-green-800' : 'text-yellow-800'
              }`}>
              {product.active ? 'Product is Active' : 'Product is Inactive'}
            </h3>
            <p
              class={`text-sm ${
                product.active ? 'text-green-600' : 'text-yellow-600'
              }`}>
              {
                product.active
                  ? 'This product is visible to customers and available for purchase.'
                  : 'This product is hidden from customers and cannot be purchased.'
              }
            </p>
          </div>
        </div>
      </div>

      <!-- Product Form -->
      <div class="rounded-lg bg-white shadow">
        <div class="border-b border-gray-200 px-6 py-4">
          <h2 class="text-lg font-medium text-gray-900">Product Information</h2>
          <p class="text-sm text-gray-600">
            Update product details, pricing, and variations
          </p>
        </div>
        <div class="p-6">
          <ProductForm
            product={product}
            productTypes={siteConfig.productTypes}
            onSubmit={async (productData: Partial<Product>) => {
              // This would call an API endpoint to update the product
              console.log('Updating product:', productData);

              // For now, we'll just redirect back to the products list
              // In a real implementation, you'd:
              // 1. Call your API endpoint
              // 2. Handle success/error responses
              // 3. Redirect on success

              await new Promise((resolve) => {
                alert(
                  'Product update would be implemented here. For now, check the console for the product data.',
                );
                window.location.href = '/admin/products';
                resolve(undefined);
              });
            }}
            onCancel={() => {
              window.location.href = '/admin/products';
            }}
            client:load
          />
        </div>
      </div>

      <!-- Product Preview -->
      <div class="mt-8 rounded-lg bg-white shadow">
        <div class="border-b border-gray-200 px-6 py-4">
          <h2 class="text-lg font-medium text-gray-900">Product Preview</h2>
          <p class="text-sm text-gray-600">
            How this product appears to customers
          </p>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
            <!-- Product Images -->
            <div class="space-y-4">
              <h3 class="font-medium text-gray-900">Images</h3>
              {
                product.images.length > 0 ? (
                  <div class="grid grid-cols-2 gap-4">
                    {product.images.map((image, index) => (
                      <div class="relative">
                        <img
                          src={image}
                          alt={`${product.name} - ${String(index + 1)}`}
                          class="h-32 w-full rounded-lg object-cover"
                        />
                        <div class="bg-opacity-50 absolute bottom-1 left-1 rounded bg-black px-2 py-1 text-xs text-white">
                          {index === 0
                            ? 'Primary'
                            : `Image ${String(index + 1)}`}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div class="flex h-32 items-center justify-center rounded-lg border-2 border-dashed border-gray-300">
                    <span class="text-gray-400">No images uploaded</span>
                  </div>
                )
              }
            </div>

            <!-- Product Details -->
            <div class="space-y-4">
              <h3 class="font-medium text-gray-900">Details</h3>
              <div class="space-y-3">
                <div>
                  <span class="text-sm font-medium text-gray-500">Name:</span>
                  <p class="text-gray-900">{product.name}</p>
                </div>
                <div>
                  <span class="text-sm font-medium text-gray-500"
                    >Description:</span
                  >
                  <p class="text-gray-900">{product.description}</p>
                </div>
                <div>
                  <span class="text-sm font-medium text-gray-500"
                    >Base Price:</span
                  >
                  <p class="text-gray-900">
                    ${(product.basePrice / 100).toFixed(2)}
                    {product.currency.toUpperCase()}
                  </p>
                </div>
                <div>
                  <span class="text-sm font-medium text-gray-500">SKU:</span>
                  <p class="text-gray-900">
                    {product.metadata.sku ?? 'Not set'}
                  </p>
                </div>
                <div>
                  <span class="text-sm font-medium text-gray-500"
                    >Category:</span
                  >
                  <p class="text-gray-900">
                    {product.metadata.category ?? 'Not set'}
                  </p>
                </div>
                <div>
                  <span class="text-sm font-medium text-gray-500">Brand:</span>
                  <p class="text-gray-900">
                    {product.metadata.brand ?? 'Not set'}
                  </p>
                </div>
                {
                  product.metadata.tags.length > 0 && (
                    <div>
                      <span class="text-sm font-medium text-gray-500">
                        Tags:
                      </span>
                      <div class="mt-1 flex flex-wrap gap-1">
                        {product.metadata.tags.map((tag) => (
                          <span class="inline-flex items-center rounded-full bg-gray-100 px-2 py-1 text-xs font-medium text-gray-800">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  )
                }
              </div>
            </div>
          </div>

          <!-- Variations Preview -->
          {
            product.variationDefinitions.length > 0 && (
              <div class="mt-6 border-t pt-6">
                <h3 class="mb-4 font-medium text-gray-900">Variations</h3>
                <div class="space-y-4">
                  {product.variationDefinitions.map((variation) => (
                    <div class="rounded-lg border p-4">
                      <div class="mb-3 flex items-center justify-between">
                        <h4 class="font-medium text-gray-900">
                          {variation.displayName}
                        </h4>
                        <div class="flex items-center space-x-2">
                          <span
                            class={`rounded-full px-2 py-1 text-xs ${
                              variation.type === 'independent'
                                ? 'bg-blue-100 text-blue-800'
                                : 'bg-purple-100 text-purple-800'
                            }`}>
                            {variation.type}
                          </span>
                          {variation.required && (
                            <span class="rounded-full bg-red-100 px-2 py-1 text-xs text-red-800">
                              Required
                            </span>
                          )}
                        </div>
                      </div>
                      <div class="grid grid-cols-2 gap-2 md:grid-cols-3">
                        {variation.options.map((option) => (
                          <div
                            class={`rounded border p-2 ${
                              option.available
                                ? 'border-gray-200 bg-white'
                                : 'border-gray-100 bg-gray-50'
                            }`}>
                            <div class="flex items-center justify-between">
                              <span
                                class={`text-sm ${
                                  option.available
                                    ? 'text-gray-900'
                                    : 'text-gray-400'
                                }`}>
                                {option.displayName}
                              </span>
                              {option.priceModifier !== 0 && (
                                <span
                                  class={`text-xs ${
                                    option.priceModifier > 0
                                      ? 'text-green-600'
                                      : 'text-red-600'
                                  }`}>
                                  {option.priceModifier > 0 ? '+' : ''}$
                                  {(option.priceModifier / 100).toFixed(2)}
                                </span>
                              )}
                            </div>
                            {!option.available && (
                              <span class="text-xs text-gray-400">
                                Unavailable
                              </span>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
          }
        </div>
      </div>

      <!-- Danger Zone -->
      <div class="mt-8 rounded-lg border border-red-200 bg-red-50">
        <div class="border-b border-red-200 px-6 py-4">
          <h2 class="text-lg font-medium text-red-900">Danger Zone</h2>
          <p class="text-sm text-red-600">
            Irreversible and destructive actions
          </p>
        </div>
        <div class="p-6">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="font-medium text-red-900">Delete Product</h3>
              <p class="text-sm text-red-600">
                Permanently delete this product and all its data. This action
                cannot be undone.
              </p>
            </div>
            <button onclick="confirmDelete()" class="btn btn-danger">
              Delete Product
            </button>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script>
    function confirmDelete() {
      if (
        confirm(
          'Are you sure you want to delete this product? This action cannot be undone.',
        )
      ) {
        // This would call an API endpoint to delete the product
        console.log('Deleting product:', '${product.id}');

        alert('Product deletion would be implemented here.');
        window.location.href = '/admin/products';
      }
    }
  </script>
</Layout>
