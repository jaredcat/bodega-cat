---
import { getProducts } from '@lib/stripe';
import Layout from '@layouts/Layout.astro';

const products = await getProducts();
---

<Layout title="Manage Products">
  <div class="min-h-screen bg-gray-50">
    <!-- Admin Header -->
    <header class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Manage Products</h1>
            <p class="text-gray-600">Add, edit, and manage your products</p>
          </div>
          <a
            href="/admin/products/new"
            class="btn btn-primary"
          >
            Add New Product
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Filters and Search -->
      <div class="bg-white rounded-lg shadow mb-6">
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label for="search" class="block text-sm font-medium text-gray-700 mb-2">
                Search Products
              </label>
              <input
                type="text"
                id="search"
                name="search"
                placeholder="Search by name, description, or SKU..."
                class="input"
              />
            </div>
            <div>
              <label for="status" class="block text-sm font-medium text-gray-700 mb-2">
                Status
              </label>
              <select id="status" name="status" class="input">
                <option value="">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
                Category
              </label>
              <select id="category" name="category" class="input">
                <option value="">All Categories</option>
                {[...new Set(products.map(p => p.metadata.category).filter(Boolean))].map(category => (
                  <option value={category}>{category}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Products Table -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex justify-between items-center">
            <h2 class="text-lg font-medium text-gray-900">
              Products ({products.length})
            </h2>
            <div class="flex space-x-2">
              <button
                id="bulk-actions"
                class="btn btn-outline"
                disabled
              >
                Bulk Actions
              </button>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left">
                  <input type="checkbox" id="select-all" class="rounded border-gray-300" />
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Product
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Category
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Last Updated
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {products.map((product) => (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <input
                      type="checkbox"
                      class="product-checkbox rounded border-gray-300"
                      value={product.id}
                    />
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {product.images.length > 0 && (
                        <img
                          class="h-12 w-12 rounded-lg object-cover mr-4"
                          src={product.images[0]}
                          alt={product.name}
                        />
                      )}
                      <div>
                        <div class="text-sm font-medium text-gray-900">{product.name}</div>
                        <div class="text-sm text-gray-500">{product.slug}</div>
                        {product.metadata.sku && (
                          <div class="text-xs text-gray-400">SKU: {product.metadata.sku}</div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${(product.basePrice / 100).toFixed(2)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {product.metadata.category ?? '-'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      product.active
                        ? 'bg-green-100 text-green-800'
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {product.active ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {product.updatedAt.toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-2">
                      <a
                        href={`/admin/products/${product.id}`}
                        class="text-primary hover:text-primary-dark"
                      >
                        Edit
                      </a>
                      <a
                        href={`/shop/${product.slug}`}
                        class="text-gray-600 hover:text-gray-900"
                      >
                        View
                      </a>
                      <button
                        onclick={`toggleProductStatus('${product.id}', ${!product.active})`}
                        class={product.active
                            ? 'text-red-600 hover:text-red-900'
                            : 'text-green-600 hover:text-green-900'}
                      >
                        {product.active ? 'Deactivate' : 'Activate'}
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {products.length === 0 && (
          <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No products</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by creating a new product.</p>
            <div class="mt-6">
              <a
                href="/admin/products/new"
                class="btn btn-primary"
              >
                Add Product
              </a>
            </div>
          </div>
        )}
      </div>
    </main>
  </div>
</Layout>

<script>
  // Product management functionality
  function toggleProductStatus(productId: string, newStatus: boolean) {
    if (confirm(`Are you sure you want to ${newStatus ? 'activate' : 'deactivate'} this product?`)) {
      // This would call an API endpoint to update the product status
      console.log(`Toggling product ${productId} to ${newStatus ? 'active' : 'inactive'}`);
      // For now, just reload the page
      window.location.reload();
    }
  }

  // Bulk selection functionality
  const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
  const productCheckboxes = document.querySelectorAll('.product-checkbox') as NodeListOf<HTMLInputElement>;
  const bulkActionsButton = document.getElementById('bulk-actions') as HTMLButtonElement;

  selectAllCheckbox?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    productCheckboxes.forEach(checkbox => {
      checkbox.checked = target.checked;
    });
    updateBulkActionsButton();
  });

  productCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateBulkActionsButton);
  });

  function updateBulkActionsButton() {
    const checkedCount = Array.from(productCheckboxes).filter(cb => cb.checked).length;
    bulkActionsButton.disabled = checkedCount === 0;
    bulkActionsButton.textContent = checkedCount > 0 ? `Bulk Actions (${checkedCount})` : 'Bulk Actions';
  }

  // Search and filter functionality
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const statusSelect = document.getElementById('status') as HTMLSelectElement;
  const categorySelect = document.getElementById('category') as HTMLSelectElement;

  function filterProducts() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusFilter = statusSelect.value;
    const categoryFilter = categorySelect.value;

    const rows = document.querySelectorAll('tbody tr') as NodeListOf<HTMLTableRowElement>;

    rows.forEach(row => {
      const productName = row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';
      const status = row.querySelector('td:nth-child(5)')?.textContent?.trim() || '';
      const category = row.querySelector('td:nth-child(4)')?.textContent?.trim() || '';

      const matchesSearch = productName.includes(searchTerm);
      const matchesStatus = !statusFilter || status.toLowerCase().includes(statusFilter);
      const matchesCategory = !categoryFilter || category === categoryFilter;

      if (matchesSearch && matchesStatus && matchesCategory) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }

  searchInput?.addEventListener('input', filterProducts);
  statusSelect?.addEventListener('change', filterProducts);
  categorySelect?.addEventListener('change', filterProducts);
</script>
