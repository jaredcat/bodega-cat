---
export const prerender = false;

import { Image } from 'astro:assets';
import Layout from '@layouts/Layout.astro';
import { getProducts } from '@lib/stripe';
import { DevIndicator } from '../../../components/DevIndicator';

const products = await getProducts();
---

<Layout title="Manage Products">
  <div class="min-h-screen bg-gray-50">
    <!-- Development Mode Indicator -->
    <DevIndicator
      isDevelopment={Astro.locals.user?.isDevelopment}
      client:load
    />

    <!-- Admin Header -->
    <header class="bg-white shadow">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Manage Products</h1>
            <p class="text-gray-600">Add, edit, and manage your products</p>
          </div>
          <a href="/admin/products/new" class="btn btn-primary">
            Add New Product
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
      <!-- Filters and Search -->
      <div class="mb-6 rounded-lg bg-white shadow">
        <div class="p-6">
          <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
            <div>
              <label
                for="search"
                class="mb-2 block text-sm font-medium text-gray-700">
                Search Products
              </label>
              <input
                type="text"
                id="search"
                name="search"
                placeholder="Search by name, description, or SKU..."
                class="input"
              />
            </div>
            <div>
              <label
                for="status"
                class="mb-2 block text-sm font-medium text-gray-700">
                Status
              </label>
              <select id="status" name="status" class="input">
                <option value="">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            <div>
              <label
                for="category"
                class="mb-2 block text-sm font-medium text-gray-700">
                Category
              </label>
              <select id="category" name="category" class="input">
                <option value="">All Categories</option>
                {
                  [
                    ...new Set(
                      products.map((p) => p.metadata.category).filter(Boolean),
                    ),
                  ].map((category) => (
                    <option value={category}>{category}</option>
                  ))
                }
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Products Table -->
      <div class="rounded-lg bg-white shadow">
        <div class="border-b border-gray-200 px-6 py-4">
          <div class="flex items-center justify-between">
            <h2 class="text-lg font-medium text-gray-900">
              Products ({products.length})
            </h2>
            <div class="flex space-x-2">
              <button id="bulk-actions" class="btn btn-outline" disabled>
                Bulk Actions
              </button>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left">
                  <input
                    type="checkbox"
                    id="select-all"
                    class="rounded border-gray-300"
                  />
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Product
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Price
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Category
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Status
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Last Updated
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
              {
                products.map((product) => (
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        class="product-checkbox rounded border-gray-300"
                        value={product.id}
                      />
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        {product.images.length > 0 && (
                          <Image
                            class="mr-4 h-12 w-12 rounded-lg object-cover"
                            src={product.images[0]}
                            alt={product.name}
                            width={48}
                            height={48}
                          />
                        )}
                        <div>
                          <div class="text-sm font-medium text-gray-900">
                            {product.name}
                          </div>
                          <div class="text-sm text-gray-500">
                            {product.slug}
                          </div>
                          {product.metadata.sku && (
                            <div class="text-xs text-gray-400">
                              SKU: {product.metadata.sku}
                            </div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 text-sm whitespace-nowrap text-gray-900">
                      ${(product.basePrice / 100).toFixed(2)}
                    </td>
                    <td class="px-6 py-4 text-sm whitespace-nowrap text-gray-500">
                      {product.metadata.category ?? '-'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span
                        class={`inline-flex rounded-full px-2 py-1 text-xs font-semibold ${
                          product.active
                            ? 'bg-green-100 text-green-800'
                            : 'bg-red-100 text-red-800'
                        }`}>
                        {product.active ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td class="px-6 py-4 text-sm whitespace-nowrap text-gray-500">
                      {product.updatedAt.toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 text-sm font-medium whitespace-nowrap">
                      <div class="flex space-x-2">
                        <a
                          href={`/admin/products/${product.id}`}
                          class="text-primary hover:text-primary-dark">
                          Edit
                        </a>
                        <a
                          href={`/shop/${product.slug}`}
                          class="text-gray-600 hover:text-gray-900">
                          View
                        </a>
                        <button
                          onclick={`toggleProductStatus('${product.id}', ${String(!product.active)})`}
                          class={
                            product.active
                              ? 'text-red-600 hover:text-red-900'
                              : 'text-green-600 hover:text-green-900'
                          }>
                          {product.active ? 'Deactivate' : 'Activate'}
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        {
          products.length === 0 && (
            <div class="py-12 text-center">
              <svg
                class="mx-auto h-12 w-12 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">
                No products
              </h3>
              <p class="mt-1 text-sm text-gray-500">
                Get started by creating a new product.
              </p>
              <div class="mt-6">
                <a href="/admin/products/new" class="btn btn-primary">
                  Add Product
                </a>
              </div>
            </div>
          )
        }
      </div>
    </main>
  </div>
</Layout>

<script>
  // Product management functionality
  function toggleProductStatus(productId: string, newStatus: boolean) {
    if (
      confirm(
        `Are you sure you want to ${newStatus ? 'activate' : 'deactivate'} this product?`,
      )
    ) {
      // This would call an API endpoint to update the product status
      console.log(
        `Toggling product ${productId} to ${newStatus ? 'active' : 'inactive'}`,
      );
      // For now, just reload the page
      window.location.reload();
    }
  }

  // Bulk selection functionality
  const selectAllCheckbox = document.getElementById(
    'select-all',
  ) as HTMLInputElement;
  const productCheckboxes = document.querySelectorAll(
    '.product-checkbox',
  ) as NodeListOf<HTMLInputElement>;
  const bulkActionsButton = document.getElementById(
    'bulk-actions',
  ) as HTMLButtonElement;

  selectAllCheckbox?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    productCheckboxes.forEach((checkbox) => {
      checkbox.checked = target.checked;
    });
    updateBulkActionsButton();
  });

  productCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener('change', updateBulkActionsButton);
  });

  function updateBulkActionsButton() {
    const checkedCount = Array.from(productCheckboxes).filter(
      (cb) => cb.checked,
    ).length;
    bulkActionsButton.disabled = checkedCount === 0;
    bulkActionsButton.textContent =
      checkedCount > 0 ? `Bulk Actions (${checkedCount})` : 'Bulk Actions';
  }

  // Search and filter functionality
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const statusSelect = document.getElementById('status') as HTMLSelectElement;
  const categorySelect = document.getElementById(
    'category',
  ) as HTMLSelectElement;

  function filterProducts() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusFilter = statusSelect.value;
    const categoryFilter = categorySelect.value;

    const rows = document.querySelectorAll(
      'tbody tr',
    ) as NodeListOf<HTMLTableRowElement>;

    rows.forEach((row) => {
      const productName =
        row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';
      const status =
        row.querySelector('td:nth-child(5)')?.textContent?.trim() || '';
      const category =
        row.querySelector('td:nth-child(4)')?.textContent?.trim() || '';

      const matchesSearch = productName.includes(searchTerm);
      const matchesStatus =
        !statusFilter || status.toLowerCase().includes(statusFilter);
      const matchesCategory = !categoryFilter || category === categoryFilter;

      if (matchesSearch && matchesStatus && matchesCategory) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }

  searchInput?.addEventListener('input', filterProducts);
  statusSelect?.addEventListener('change', filterProducts);
  categorySelect?.addEventListener('change', filterProducts);
</script>
